
atmega transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800060  00800060  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000083a  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064d  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003de  00000000  00000000  000011e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000015c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037d  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016a  00000000  00000000  000019ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001b57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_1>
   8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_2>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	6a 00       	.word	0x006a	; ????
  56:	72 00       	.word	0x0072	; ????
  58:	76 00       	.word	0x0076	; ????
  5a:	7a 00       	.word	0x007a	; ????
  5c:	6e 00       	.word	0x006e	; ????
  5e:	82 00       	.word	0x0082	; ????
  60:	7e 00       	.word	0x007e	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	ea e2       	ldi	r30, 0x2A	; 42
  76:	f2 e0       	ldi	r31, 0x02	; 2
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a0 36       	cpi	r26, 0x60	; 96
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a0 e6       	ldi	r26, 0x60	; 96
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a3 37       	cpi	r26, 0x73	; 115
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  98:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <UART_init>:
// LLL - Turn Off Fan
// LLR - Turn Off Light

void UART_init()
{
	UCSRA = 0;
  a0:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0b10011000;
  a2:	88 e9       	ldi	r24, 0x98	; 152
  a4:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10000110;
  a6:	86 e8       	ldi	r24, 0x86	; 134
  a8:	80 bd       	out	0x20, r24	; 32
	UBRRH = 0x00;
  aa:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0x33;
  ac:	83 e3       	ldi	r24, 0x33	; 51
  ae:	89 b9       	out	0x09, r24	; 9
  b0:	08 95       	ret

000000b2 <UART_send>:
}

void UART_send(unsigned char data)
{
	while((UCSRA & (1<<UDRE)) == 0);
  b2:	5d 9b       	sbis	0x0b, 5	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <UART_send>
	UDR = data;
  b6:	8c b9       	out	0x0c, r24	; 12
  b8:	08 95       	ret

000000ba <command_select>:
}

void command_select()
{
	switch (ch)
  ba:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <ch>
  be:	8e 2f       	mov	r24, r30
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	e7 30       	cpi	r30, 0x07	; 7
  c8:	f1 05       	cpc	r31, r1
  ca:	f8 f4       	brcc	.+62     	; 0x10a <command_select+0x50>
  cc:	e6 5d       	subi	r30, 0xD6	; 214
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__tablejump2__>
	{
		case(1):
			UART_send(1);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_send>
			break;
  da:	08 95       	ret
		case(5):
			UART_send(5);
  dc:	85 e0       	ldi	r24, 0x05	; 5
  de:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_send>
			break;
  e2:	08 95       	ret
		case(2):
			UART_send(2);
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_send>
			break;
  ea:	08 95       	ret
		case(3):
			UART_send(3);
  ec:	83 e0       	ldi	r24, 0x03	; 3
  ee:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_send>
			break;
  f2:	08 95       	ret
		case(4):
			UART_send(4);
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_send>
			break;
  fa:	08 95       	ret
		case(7):
			UART_send(7);
  fc:	87 e0       	ldi	r24, 0x07	; 7
  fe:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_send>
			break;
 102:	08 95       	ret
		case (6):
			UART_send(6);
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_send>
 10a:	08 95       	ret

0000010c <execute_command>:
	}
}

void execute_command()
{
	command_select();
 10c:	0e 94 5d 00 	call	0xba	; 0xba <command_select>
	ch = 0;
 110:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <ch>
	comm_bits = 0;
 114:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <comm_bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	2f e3       	ldi	r18, 0x3F	; 63
 11a:	8d e0       	ldi	r24, 0x0D	; 13
 11c:	93 e0       	ldi	r25, 0x03	; 3
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <execute_command+0x12>
 126:	00 c0       	rjmp	.+0      	; 0x128 <execute_command+0x1c>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <__vector_1>:
	_delay_ms(1000);
}

ISR(INT0_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
	comm_bits = comm_bits + 1;
 13a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <comm_bits>
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <comm_bits>
	ch = ch << 1;
 144:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <ch>
 148:	88 0f       	add	r24, r24
 14a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <ch>
	PORTA |= 0x02;
 14e:	8b b3       	in	r24, 0x1b	; 27
 150:	82 60       	ori	r24, 0x02	; 2
 152:	8b bb       	out	0x1b, r24	; 27
 154:	87 ea       	ldi	r24, 0xA7	; 167
 156:	91 e6       	ldi	r25, 0x61	; 97
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <__vector_1+0x2c>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <__vector_1+0x32>
 15e:	00 00       	nop
	_delay_ms(100);
	PORTA &= ~(0x02);
 160:	8b b3       	in	r24, 0x1b	; 27
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	8b bb       	out	0x1b, r24	; 27
}
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_2>:

ISR(INT1_vect)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
	comm_bits = comm_bits + 1;
 182:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <comm_bits>
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <comm_bits>
	ch = (ch<<1) + 1;
 18c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <ch>
 190:	88 0f       	add	r24, r24
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <ch>
	PORTA |= 0x04;
 198:	8b b3       	in	r24, 0x1b	; 27
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	8b bb       	out	0x1b, r24	; 27
 19e:	87 ea       	ldi	r24, 0xA7	; 167
 1a0:	91 e6       	ldi	r25, 0x61	; 97
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <__vector_2+0x2e>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <__vector_2+0x34>
 1a8:	00 00       	nop
	_delay_ms(100);
	PORTA &= ~(0x04);
 1aa:	8b b3       	in	r24, 0x1b	; 27
 1ac:	8b 7f       	andi	r24, 0xFB	; 251
 1ae:	8b bb       	out	0x1b, r24	; 27
}
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <main>:

int main(void)
{
	DDRA = 0xff;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 1c2:	1b ba       	out	0x1b, r1	; 27

	GICR = (1<<INT0);
 1c4:	80 e4       	ldi	r24, 0x40	; 64
 1c6:	8b bf       	out	0x3b, r24	; 59
	GICR |= (1<<INT1);
 1c8:	8b b7       	in	r24, 0x3b	; 59
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1<<ISC01);
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC11);
 1d2:	85 b7       	in	r24, 0x35	; 53
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	85 bf       	out	0x35, r24	; 53
	
	UART_init();	
 1d8:	0e 94 50 00 	call	0xa0	; 0xa0 <UART_init>
	comm_bits = 0;
 1dc:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <comm_bits>
	sei();
 1e0:	78 94       	sei
	
	while (1)
	{
		if (comm_bits == 3 && ch !=0)
 1e2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <comm_bits>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	59 f4       	brne	.+22     	; 0x200 <main+0x42>
 1ea:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <ch>
 1ee:	88 23       	and	r24, r24
 1f0:	39 f0       	breq	.+14     	; 0x200 <main+0x42>
		{
			PORTA = PORTA ^ 0x01;
 1f2:	9b b3       	in	r25, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	89 27       	eor	r24, r25
 1f8:	8b bb       	out	0x1b, r24	; 27
			execute_command();
 1fa:	0e 94 86 00 	call	0x10c	; 0x10c <execute_command>
 1fe:	f1 cf       	rjmp	.-30     	; 0x1e2 <main+0x24>
		}
		else if (comm_bits == 3 && ch == 0)
 200:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <comm_bits>
 204:	83 30       	cpi	r24, 0x03	; 3
 206:	69 f7       	brne	.-38     	; 0x1e2 <main+0x24>
 208:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <ch>
 20c:	81 11       	cpse	r24, r1
 20e:	e9 cf       	rjmp	.-46     	; 0x1e2 <main+0x24>
		{
			comm_bits = 0;
 210:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <comm_bits>
			ch  =0;
 214:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <ch>
 218:	e4 cf       	rjmp	.-56     	; 0x1e2 <main+0x24>

0000021a <__tablejump2__>:
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	05 90       	lpm	r0, Z+
 220:	f4 91       	lpm	r31, Z
 222:	e0 2d       	mov	r30, r0
 224:	09 94       	ijmp

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>

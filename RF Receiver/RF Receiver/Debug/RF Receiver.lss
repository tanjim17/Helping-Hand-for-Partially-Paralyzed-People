
RF Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005af  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000532  00000000  00000000  0000074b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022d  00000000  00000000  00000c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000eac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d1  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000011c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:
#define F_CPU 1000000

#include <avr/io.h>

void UART_init() {
	UCSRA = 0;
  6c:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0b00010000;
  6e:	80 e1       	ldi	r24, 0x10	; 16
  70:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10000110;
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	80 bd       	out	0x20, r24	; 32
	UBRRH = 0x00;
  76:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0xcf;
  78:	8f ec       	ldi	r24, 0xCF	; 207
  7a:	89 b9       	out	0x09, r24	; 9
  7c:	08 95       	ret

0000007e <UART_receive>:
}

unsigned char UART_receive() {
	while((UCSRA & (1<<RXC)) == 0);
  7e:	5f 9b       	sbis	0x0b, 7	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <UART_receive>
	//PORTA = ~PORTA;
	return UDR;
  82:	8c b1       	in	r24, 0x0c	; 12
}
  84:	08 95       	ret

00000086 <main>:


int main(void) {
	DDRA = 0xff;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
  8a:	87 bb       	out	0x17, r24	; 23
	UART_init();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>
	PORTA = 0;
  90:	1b ba       	out	0x1b, r1	; 27
	PORTB = 1;
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	88 bb       	out	0x18, r24	; 24
	while (1)
	{
		if(UART_receive() & 1) {
  96:	0e 94 3f 00 	call	0x7e	; 0x7e <UART_receive>
  9a:	80 ff       	sbrs	r24, 0
  9c:	fc cf       	rjmp	.-8      	; 0x96 <main+0x10>
			PORTA = ~PORTA;
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	80 95       	com	r24
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	f8 cf       	rjmp	.-16     	; 0x96 <main+0x10>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
